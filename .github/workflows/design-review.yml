name: 🎨 Automated Design Review

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'components/**'
      - 'pages/**'
      - 'styles/**'
      - 'public/**'
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  design-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 🚀 Start application
      run: |
        npm start &
        npx wait-on http://localhost:3000 --timeout 60000
        
    - name: 🎨 Run design review
      run: |
        mkdir -p test-results
        mkdir -p design-review-reports
        node scripts/design-review/design-reviewer.js http://localhost:3000
        
    - name: 🧪 Run design review tests
      run: npx playwright test tests/design-review.spec.ts --reporter=html
      
    - name: 📊 Upload design review reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: design-review-reports
        path: |
          design-review-reports/
          test-results/
          playwright-report/
        retention-days: 30
        
    - name: 💬 Comment PR with design review results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the latest design review report
          const reportsDir = 'design-review-reports';
          if (fs.existsSync(reportsDir)) {
            const files = fs.readdirSync(reportsDir)
              .filter(file => file.endsWith('.json'))
              .sort()
              .reverse();
              
            if (files.length > 0) {
              const reportPath = path.join(reportsDir, files[0]);
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const scoreEmoji = report.summary.score >= 90 ? '🟢' : 
                                report.summary.score >= 70 ? '🟡' : '🔴';
              
              const comment = `## ${scoreEmoji} Design Review Results
              
              **Score: ${report.summary.score}%**
              
              - ✅ **Passed:** ${report.summary.passed} checks
              - ⚠️ **Warnings:** ${report.summary.warnings} items
              - ❌ **Issues:** ${report.summary.issues} problems
              
              ### Key Findings
              
              ${report.issues.length > 0 ? `
              **🚨 Critical Issues:**
              ${report.issues.slice(0, 5).map(issue => `- **${issue.category}** (${issue.page}): ${issue.message}`).join('\n')}
              ${report.issues.length > 5 ? `\n... and ${report.issues.length - 5} more issues` : ''}
              ` : ''}
              
              ${report.warnings.length > 0 ? `
              **⚠️ Warnings:**
              ${report.warnings.slice(0, 3).map(warning => `- **${warning.category}** (${warning.page}): ${warning.message}`).join('\n')}
              ${report.warnings.length > 3 ? `\n... and ${report.warnings.length - 3} more warnings` : ''}
              ` : ''}
              
              ### Brand Consistency
              ${report.passed.filter(p => p.category.includes('Brand')).length > 0 ? '✅ Brand guidelines followed' : '⚠️ Check brand consistency'}
              
              ### Accessibility
              ${report.passed.filter(p => p.category === 'Accessibility').length > 0 ? '✅ Accessibility standards met' : '⚠️ Accessibility issues detected'}
              
              ### SEO Optimization  
              ${report.passed.filter(p => p.category === 'SEO').length > 0 ? '✅ SEO best practices applied' : '⚠️ SEO optimization needed'}
              
              ---
              *Automated design review powered by Playwright & AI*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }

  visual-regression:
    runs-on: ubuntu-latest
    needs: design-review
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js  
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 🚀 Start application
      run: |
        npm start &
        npx wait-on http://localhost:3000 --timeout 60000
        
    - name: 📸 Run visual regression tests
      run: npx playwright test tests/visual-regression.spec.ts --reporter=html
      
    - name: 📊 Upload visual regression results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-regression-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  accessibility-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🔧 Install audit tools
      run: |
        npm install -g @axe-core/cli lighthouse wait-on
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 🚀 Start application
      run: |
        npm start &
        wait-on http://localhost:3000 --timeout 60000
        
    - name: ♿ Run accessibility audit
      run: |
        axe http://localhost:3000 --exit || true
        
    - name: 🔍 Lighthouse audit
      run: |
        lighthouse http://localhost:3000 --output=html --output-path=./lighthouse-report.html --chrome-flags="--headless --no-sandbox" --quiet
        
    - name: 📊 Upload accessibility reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-reports
        path: |
          lighthouse-report.html
        retention-days: 30